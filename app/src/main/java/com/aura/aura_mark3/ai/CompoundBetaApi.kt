// Generated by Copilot
package com.aura.aura_mark3.ai

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.Body
import retrofit2.http.Header
import retrofit2.http.POST
import retrofit2.Call
import java.util.concurrent.TimeUnit

/**
 * Data classes for Compound Beta (Agentic AI) API integration
 * Supports compound-beta and compound-beta-mini models with real-world data access
 */

data class CompoundMessage(
    val role: String, // "user", "system", "assistant"
    val content: String
)

data class ToolCall(
    val id: String,
    val type: String, // "web_search" or "code_execution"
    val function: ToolFunction
)

data class ToolFunction(
    val name: String,
    val arguments: String
)

data class ExecutedTool(
    val toolCallId: String,
    val type: String,
    val function: ToolFunction,
    val result: String
)

data class CompoundRequest(
    val model: String, // "compound-beta" or "compound-beta-mini"
    val messages: List<CompoundMessage>,
    val maxTokens: Int = 1024,
    val temperature: Float = 0.7f,
    val stream: Boolean = false
)

data class CompoundChoice(
    val index: Int,
    val message: CompoundMessage,
    val finishReason: String?,
    val executedTools: List<ExecutedTool>? = null
)

data class CompoundUsage(
    val promptTokens: Int,
    val completionTokens: Int,
    val totalTokens: Int
)

data class CompoundResponse(
    val id: String,
    val `object`: String,
    val created: Long,
    val model: String,
    val choices: List<CompoundChoice>,
    val usage: CompoundUsage
)

/**
 * Compound Beta API interface for agentic AI capabilities
 * Provides access to web search and code execution tools
 */
interface CompoundBetaApi {
    @POST("/openai/v1/chat/completions")
    fun chatCompletion(
        @Header("Authorization") authHeader: String,
        @Body request: CompoundRequest
    ): Call<CompoundResponse>
}

/**
 * Provider function for Compound Beta API with enhanced timeouts
 * for complex agentic operations
 */
fun provideCompoundBetaApi(): CompoundBetaApi {
    val logging = HttpLoggingInterceptor().apply {
        level = HttpLoggingInterceptor.Level.BODY
    }

    val client = OkHttpClient.Builder()
        .addInterceptor(logging)
        .connectTimeout(45, TimeUnit.SECONDS) // Increased for agentic operations
        .readTimeout(120, TimeUnit.SECONDS)   // Increased for web search/code execution
        .writeTimeout(45, TimeUnit.SECONDS)
        .build()

    val retrofit = Retrofit.Builder()
        .baseUrl("https://api.groq.com/")
        .client(client)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    return retrofit.create(CompoundBetaApi::class.java)
}

/**
 * Helper class for managing agentic AI conversations
 * Handles system prompts and conversation context
 */
class AuraAgenticAssistant {

    companion object {
        const val SYSTEM_PROMPT = """You are AURA (Autonomous UI Reader and Assistant), an advanced AI voice assistant that helps users interact with their Android devices through voice commands. You have access to real-time information through web search and can execute code for calculations.

Key capabilities:
- Voice-controlled device interaction and navigation
- Real-time information access via web search
- Screen reading and UI element interaction
- Accessibility support for users with visual/motor impairments
- Natural conversation with contextual awareness
- Code execution for calculations and data processing

Response guidelines:
- Be conversational, helpful, and concise
- Greet users warmly when they say "Hey Aura"
- Use web search for current information (weather, news, facts)
- Provide step-by-step guidance for device interactions
- Prioritize accessibility and user safety
- Ask for clarification when commands are ambiguous

Always respond in a natural, friendly tone as a personal assistant would."""
    }

    private val conversationHistory = mutableListOf<CompoundMessage>()

    init {
        // Initialize with system prompt
        conversationHistory.add(CompoundMessage("system", SYSTEM_PROMPT))
    }

    /**
     * Add user message to conversation history
     */
    fun addUserMessage(message: String) {
        conversationHistory.add(CompoundMessage("user", message))

        // Keep conversation history manageable (last 10 exchanges)
        if (conversationHistory.size > 21) { // 1 system + 20 messages
            // Remove oldest user/assistant pair, keep system message
            conversationHistory.removeAt(1)
            conversationHistory.removeAt(1)
        }
    }

    /**
     * Add assistant response to conversation history
     */
    fun addAssistantMessage(message: String) {
        conversationHistory.add(CompoundMessage("assistant", message))
    }

    /**
     * Get current conversation context
     */
    fun getConversationHistory(): List<CompoundMessage> {
        return conversationHistory.toList()
    }

    /**
     * Clear conversation history except system prompt
     */
    fun clearHistory() {
        val systemPrompt = conversationHistory.first()
        conversationHistory.clear()
        conversationHistory.add(systemPrompt)
    }

    /**
     * Create request for compound-beta API
     */
    fun createCompoundRequest(
        message: String,
        useFullModel: Boolean = true
    ): CompoundRequest {
        addUserMessage(message)

        return CompoundRequest(
            model = if (useFullModel) "compound-beta" else "compound-beta-mini",
            messages = conversationHistory,
            maxTokens = 1024,
            temperature = 0.7f
        )
    }
}