// Generated by Copilot
package com.aura.aura_mark3.ui

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlin.math.*

/**
 * Modern Voice Assistant UI Component for AURA
 * 
 * Features:
 * - Animated voice visualization
 * - Real-time audio level feedback
 * - Modern gradient design
 * - Responsive layout for different screen sizes
 * - Accessibility support
 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VoiceAssistantUI(
    isListening: Boolean,
    listeningType: String, // "wake_word", "command", "stopped"
    audioLevel: Int,
    userTranscription: String,
    assistantSpeech: String,
    statusMessage: String,
    onManualRecord: () -> Unit,
    onSettings: () -> Unit,
    modifier: Modifier = Modifier
) {
    val configuration = LocalConfiguration.current
    val isLandscape = configuration.orientation == android.content.res.Configuration.ORIENTATION_LANDSCAPE
    val screenWidth = configuration.screenWidthDp
    val isTablet = screenWidth >= 600

    // Animation states
    val pulseAnimation by rememberInfiniteTransition().animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(1500, easing = EaseInOutCubic),
            repeatMode = RepeatMode.Reverse
        )
    )

    val waveAnimation by rememberInfiniteTransition().animateFloat(
        initialValue = 0f,
        targetValue = 2 * PI.toFloat(),
        animationSpec = infiniteRepeatable(
            animation = tween(2000, easing = LinearEasing),
            repeatMode = RepeatMode.Restart
        )
    )

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF1A1A2E),
                        Color(0xFF16213E),
                        Color(0xFF0F0F23)
                    )
                )
            )
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Header with AURA branding
        AuraHeader(
            onSettings = onSettings,
            isTablet = isTablet
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Main voice visualization area
        Box(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                // Voice visualization circle
                VoiceVisualization(
                    isListening = isListening,
                    listeningType = listeningType,
                    audioLevel = audioLevel,
                    pulseAnimation = pulseAnimation,
                    waveAnimation = waveAnimation,
                    isTablet = isTablet
                )

                Spacer(modifier = Modifier.height(24.dp))

                // Status text
                StatusDisplay(
                    isListening = isListening,
                    listeningType = listeningType,
                    isTablet = isTablet
                )

                Spacer(modifier = Modifier.height(32.dp))

                // Conversation display
                ConversationDisplay(
                    userTranscription = userTranscription,
                    assistantSpeech = assistantSpeech,
                    statusMessage = statusMessage,
                    isTablet = isTablet
                )
            }
        }

        // Bottom controls
        BottomControls(
            isListening = isListening,
            onManualRecord = onManualRecord,
            isTablet = isTablet
        )
    }
}

@Composable
private fun AuraHeader(
    onSettings: () -> Unit,
    isTablet: Boolean
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        // AURA logo/title
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                imageVector = Icons.Default.Psychology,
                contentDescription = "AURA AI",
                tint = Color(0xFF64FFDA),
                modifier = Modifier.size(if (isTablet) 36.dp else 28.dp)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Text(
                text = "AURA",
                fontSize = if (isTablet) 28.sp else 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
        }

        // Settings button
        IconButton(
            onClick = onSettings,
            modifier = Modifier
                .background(
                    color = Color.White.copy(alpha = 0.1f),
                    shape = CircleShape
                )
        ) {
            Icon(
                imageVector = Icons.Default.Settings,
                contentDescription = "Settings",
                tint = Color(0xFF64FFDA),
                modifier = Modifier.size(if (isTablet) 28.dp else 24.dp)
            )
        }
    }
}

@Composable
private fun VoiceVisualization(
    isListening: Boolean,
    listeningType: String,
    audioLevel: Int,
    pulseAnimation: Float,
    waveAnimation: Float,
    isTablet: Boolean
) {
    val baseSize = if (isTablet) 200.dp else 160.dp
    val scale = if (isListening) pulseAnimation else 1f
    val normalizedAudioLevel = (audioLevel / 5000f).coerceIn(0f, 1f)

    // Color based on listening state
    val primaryColor = when (listeningType) {
        "wake_word" -> Color(0xFF2196F3) // Blue for wake word listening
        "command" -> Color(0xFF4CAF50)   // Green for command recording
        else -> Color(0xFF757575)        // Gray for inactive
    }

    val secondaryColor = when (listeningType) {
        "wake_word" -> Color(0xFF64FFDA)
        "command" -> Color(0xFF81C784)
        else -> Color(0xFFBDBDBD)
    }

    Box(
        modifier = Modifier
            .size(baseSize)
            .scale(scale),
        contentAlignment = Alignment.Center
    ) {
        // Outer ring (audio level indicator)
        Canvas(
            modifier = Modifier.fillMaxSize()
        ) {
            if (isListening) {
                drawAudioWaves(
                    audioLevel = normalizedAudioLevel,
                    waveAnimation = waveAnimation,
                    primaryColor = primaryColor,
                    secondaryColor = secondaryColor
                )
            }
        }

        // Main circle
        Box(
            modifier = Modifier
                .size(baseSize * 0.7f)
                .background(
                    brush = Brush.radialGradient(
                        colors = listOf(
                            primaryColor.copy(alpha = 0.8f),
                            primaryColor.copy(alpha = 0.4f),
                            Color.Transparent
                        )
                    ),
                    shape = CircleShape
                )
                .clip(CircleShape),
            contentAlignment = Alignment.Center
        ) {
            // Inner icon
            Icon(
                imageVector = when (listeningType) {
                    "wake_word" -> Icons.Default.Hearing
                    "command" -> Icons.Default.Mic
                    else -> Icons.Default.MicOff
                },
                contentDescription = "Voice Status",
                tint = Color.White,
                modifier = Modifier.size(if (isTablet) 64.dp else 48.dp)
            )
        }
    }
}

private fun DrawScope.drawAudioWaves(
    audioLevel: Float,
    waveAnimation: Float,
    primaryColor: Color,
    secondaryColor: Color
) {
    val center = Offset(size.width / 2, size.height / 2)
    val maxRadius = size.minDimension / 2

    // Draw multiple wave rings
    for (i in 1..3) {
        val baseRadius = maxRadius * (0.3f + i * 0.2f)
        val animatedRadius = baseRadius + (audioLevel * 20f * i)
        val alpha = (1f - (i * 0.2f)) * audioLevel

        // Outer wave
        drawCircle(
            color = primaryColor.copy(alpha = alpha * 0.3f),
            radius = animatedRadius + sin(waveAnimation + i) * 10f,
            center = center
        )

        // Inner wave
        drawCircle(
            color = secondaryColor.copy(alpha = alpha * 0.2f),
            radius = animatedRadius * 0.8f + cos(waveAnimation + i) * 8f,
            center = center
        )
    }
}

@Composable
private fun StatusDisplay(
    isListening: Boolean,
    listeningType: String,
    isTablet: Boolean
) {
    val statusText = when {
        !isListening -> "Voice assistant ready"
        listeningType == "wake_word" -> "Say \"Hey Aura\" to start"
        listeningType == "command" -> "Listening... speak your command"
        else -> "Processing..."
    }

    val statusColor = when (listeningType) {
        "wake_word" -> Color(0xFF64FFDA)
        "command" -> Color(0xFF4CAF50)
        else -> Color(0xFFBDBDBD)
    }

    Text(
        text = statusText,
        fontSize = if (isTablet) 20.sp else 16.sp,
        color = statusColor,
        textAlign = TextAlign.Center,
        fontWeight = if (isListening) FontWeight.SemiBold else FontWeight.Normal
    )
}

@Composable
private fun ConversationDisplay(
    userTranscription: String,
    assistantSpeech: String,
    statusMessage: String,
    isTablet: Boolean
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // User message
        AnimatedVisibility(
            visible = userTranscription.isNotBlank(),
            enter = slideInVertically() + fadeIn(),
            exit = slideOutVertically() + fadeOut()
        ) {
            ConversationCard(
                title = "You said:",
                content = userTranscription,
                backgroundColor = Color(0xFF1E3A8A),
                textColor = Color(0xFF93C5FD),
                isTablet = isTablet
            )
        }

        if (userTranscription.isNotBlank()) {
            Spacer(modifier = Modifier.height(12.dp))
        }

        // Assistant response
        AnimatedVisibility(
            visible = assistantSpeech.isNotBlank(),
            enter = slideInVertically() + fadeIn(),
            exit = slideOutVertically() + fadeOut()
        ) {
            ConversationCard(
                title = "AURA:",
                content = assistantSpeech,
                backgroundColor = Color(0xFF064E3B),
                textColor = Color(0xFF6EE7B7),
                isTablet = isTablet
            )
        }

        if (assistantSpeech.isNotBlank()) {
            Spacer(modifier = Modifier.height(12.dp))
        }

        // Status message
        AnimatedVisibility(
            visible = statusMessage.isNotBlank(),
            enter = slideInVertically() + fadeIn(),
            exit = slideOutVertically() + fadeOut()
        ) {
            ConversationCard(
                title = "Status:",
                content = statusMessage,
                backgroundColor = Color(0xFF7C2D12),
                textColor = Color(0xFFFBBF24),
                isTablet = isTablet
            )
        }
    }
}

@Composable
private fun ConversationCard(
    title: String,
    content: String,
    backgroundColor: Color,
    textColor: Color,
    isTablet: Boolean
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = if (isTablet) 32.dp else 16.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor.copy(alpha = 0.8f)),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                fontSize = if (isTablet) 16.sp else 14.sp,
                fontWeight = FontWeight.Bold,
                color = textColor.copy(alpha = 0.8f)
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = content,
                fontSize = if (isTablet) 18.sp else 16.sp,
                color = textColor,
                lineHeight = if (isTablet) 24.sp else 22.sp
            )
        }
    }
}

@Composable
private fun BottomControls(
    isListening: Boolean,
    onManualRecord: () -> Unit,
    isTablet: Boolean
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.Center
    ) {
        // Manual record button
        FilledTonalButton(
            onClick = onManualRecord,
            modifier = Modifier
                .height(if (isTablet) 56.dp else 48.dp)
                .widthIn(min = if (isTablet) 200.dp else 160.dp),
            colors = ButtonDefaults.filledTonalButtonColors(
                containerColor = Color(0xFF64FFDA).copy(alpha = 0.2f),
                contentColor = Color(0xFF64FFDA)
            ),
            shape = RoundedCornerShape(24.dp)
        ) {
            Icon(
                imageVector = if (isListening) Icons.Default.Stop else Icons.Default.Mic,
                contentDescription = if (isListening) "Stop recording" else "Manual record",
                modifier = Modifier.size(if (isTablet) 24.dp else 20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = if (isListening) "Stop" else "Manual Record",
                fontSize = if (isTablet) 16.sp else 14.sp,
                fontWeight = FontWeight.SemiBold
            )
        }
    }
}
