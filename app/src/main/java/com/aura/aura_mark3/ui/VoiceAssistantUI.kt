// Generated by Copilot
package com.aura.aura_mark3.ui

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.math.*

/**
 * Modern Voice Assistant UI Component for AURA
 * 
 * Features:
 * - Animated voice visualization
 * - Real-time audio level feedback
 * - Modern gradient design
 * - Responsive layout for different screen sizes
 * - Accessibility support
 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VoiceAssistantUI(
    modifier: Modifier = Modifier,
    isListening: Boolean = false,
    listeningType: String = "stopped",
    audioLevel: Int = 0,
    userTranscription: String = "",
    assistantSpeech: String = "",
    statusMessage: String = "",
    buttonText: String = "Tap to Talk",
    canRecord: Boolean = true,
    onManualRecord: () -> Unit = {},
    onSettings: () -> Unit = {},
    isTablet: Boolean = false
) {
    val configuration = LocalConfiguration.current
    val isLandscape = configuration.orientation == android.content.res.Configuration.ORIENTATION_LANDSCAPE
    val screenWidth = configuration.screenWidthDp
    val isTablet = screenWidth >= 600

    // Animation states
    val pulseAnimation by rememberInfiniteTransition().animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(1500, easing = EaseInOutCubic),
            repeatMode = RepeatMode.Reverse
        )
    )

    val waveAnimation by rememberInfiniteTransition().animateFloat(
        initialValue = 0f,
        targetValue = 2 * PI.toFloat(),
        animationSpec = infiniteRepeatable(
            animation = tween(2000, easing = LinearEasing),
            repeatMode = RepeatMode.Restart
        )
    )

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF1A1A2E),
                        Color(0xFF16213E),
                        Color(0xFF0F0F23)
                    )
                )
            )
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Header with AURA branding
        AuraHeader(
            onSettings = onSettings,
            isTablet = isTablet
        )

        // Status bar moved to top for better visibility
        Spacer(modifier = Modifier.height(16.dp))
        
        StatusBar(
            statusMessage = statusMessage,
            isListening = isListening,
            listeningType = listeningType,
            isTablet = isTablet
        )

        Spacer(modifier = Modifier.height(24.dp))

        // Main voice visualization area
        Box(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                // Voice visualization circle
                VoiceVisualization(
                    isListening = isListening,
                    listeningType = listeningType,
                    audioLevel = audioLevel,
                    pulseAnimation = pulseAnimation,
                    waveAnimation = waveAnimation,
                    isTablet = isTablet
                )

                Spacer(modifier = Modifier.height(32.dp))

                // Conversation display
                ConversationDisplay(
                    userTranscription = userTranscription,
                    assistantSpeech = assistantSpeech,
                    isTablet = isTablet
                )
            }
        }

        // Bottom controls with clear button state
        BottomControls(
            buttonText = buttonText,
            canRecord = canRecord,
            onManualRecord = onManualRecord,
            isListening = isListening,
            listeningType = listeningType,
            isTablet = isTablet
        )
    }
}

@Composable
private fun AuraHeader(
    onSettings: () -> Unit,
    isTablet: Boolean
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        // AURA logo/title
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                imageVector = Icons.Default.Psychology,
                contentDescription = "AURA AI",
                tint = Color(0xFF64FFDA),
                modifier = Modifier.size(if (isTablet) 36.dp else 28.dp)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Text(
                text = "AURA",
                fontSize = if (isTablet) 28.sp else 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
        }

        // Settings button
        IconButton(
            onClick = onSettings,
            modifier = Modifier
                .background(
                    color = Color.White.copy(alpha = 0.1f),
                    shape = CircleShape
                )
        ) {
            Icon(
                imageVector = Icons.Default.Settings,
                contentDescription = "Settings",
                tint = Color(0xFF64FFDA),
                modifier = Modifier.size(if (isTablet) 28.dp else 24.dp)
            )
        }
    }
}

@Composable
private fun VoiceVisualization(
    isListening: Boolean,
    listeningType: String,
    audioLevel: Int,
    pulseAnimation: Float,
    waveAnimation: Float,
    isTablet: Boolean
) {
    val baseSize = if (isTablet) 200.dp else 160.dp
    val scale = if (isListening) pulseAnimation else 1f
    val normalizedAudioLevel = (audioLevel / 5000f).coerceIn(0f, 1f)

    // Color based on listening state
    val primaryColor = when (listeningType) {
        "wake_word" -> Color(0xFF2196F3) // Blue for wake word listening
        "command" -> Color(0xFF4CAF50)   // Green for command recording
        "manual" -> Color(0xFFFF9800)    // Orange for manual recording
        else -> Color(0xFF757575)        // Gray for inactive
    }

    val secondaryColor = when (listeningType) {
        "wake_word" -> Color(0xFF64FFDA)
        "command" -> Color(0xFF81C784)
        "manual" -> Color(0xFFFFB74D)
        else -> Color(0xFFBDBDBD)
    }

    Box(
        modifier = Modifier
            .size(baseSize)
            .scale(scale),
        contentAlignment = Alignment.Center
    ) {
        // Outer ring (audio level indicator)
        Canvas(
            modifier = Modifier.fillMaxSize()
        ) {
            if (isListening) {
                drawAudioWaves(
                    audioLevel = normalizedAudioLevel,
                    waveAnimation = waveAnimation,
                    primaryColor = primaryColor,
                    secondaryColor = secondaryColor
                )
            }
        }

        // Main circle
        Box(
            modifier = Modifier
                .size(baseSize * 0.7f)
                .background(
                    brush = Brush.radialGradient(
                        colors = listOf(
                            primaryColor.copy(alpha = 0.8f),
                            primaryColor.copy(alpha = 0.4f),
                            Color.Transparent
                        )
                    ),
                    shape = CircleShape
                )
                .clip(CircleShape),
            contentAlignment = Alignment.Center
        ) {
            // Inner icon
            Icon(
                imageVector = when (listeningType) {
                    "wake_word" -> Icons.Default.Hearing
                    "command" -> Icons.Default.Mic
                    "manual" -> Icons.Default.RecordVoiceOver
                    else -> Icons.Default.MicOff
                },
                contentDescription = "Voice Status",
                tint = Color.White,
                modifier = Modifier.size(if (isTablet) 64.dp else 48.dp)
            )
        }
    }
}

private fun DrawScope.drawAudioWaves(
    audioLevel: Float,
    waveAnimation: Float,
    primaryColor: Color,
    secondaryColor: Color
) {
    val center = Offset(size.width / 2, size.height / 2)
    val maxRadius = size.minDimension / 2

    // Draw multiple wave rings
    for (i in 1..3) {
        val baseRadius = maxRadius * (0.3f + i * 0.2f)
        val animatedRadius = baseRadius + (audioLevel * 20f * i)
        val alpha = (1f - (i * 0.2f)) * audioLevel

        // Outer wave
        drawCircle(
            color = primaryColor.copy(alpha = alpha * 0.3f),
            radius = animatedRadius + sin(waveAnimation + i) * 10f,
            center = center
        )

        // Inner wave
        drawCircle(
            color = secondaryColor.copy(alpha = alpha * 0.2f),
            radius = animatedRadius * 0.8f + cos(waveAnimation + i) * 8f,
            center = center
        )
    }
}

@Composable
private fun StatusBar(
    statusMessage: String,
    isListening: Boolean,
    listeningType: String,
    isTablet: Boolean
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = if (isTablet) 32.dp else 8.dp),
        colors = CardDefaults.cardColors(
            containerColor = when {
                isListening && listeningType == "manual" -> Color(0xFF2E7D32).copy(alpha = 0.3f)
                isListening -> Color(0xFF1976D2).copy(alpha = 0.3f)
                else -> Color(0xFF424242).copy(alpha = 0.3f)
            }
        ),
        shape = RoundedCornerShape(12.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Status indicator
            Box(
                modifier = Modifier
                    .size(12.dp)
                    .background(
                        color = when {
                            isListening && listeningType == "manual" -> Color(0xFF4CAF50)
                            isListening -> Color(0xFF2196F3)
                            else -> Color(0xFF757575)
                        },
                        shape = CircleShape
                    )
            )
            
            // Status text
            Text(
                text = statusMessage,
                fontSize = if (isTablet) 16.sp else 14.sp,
                color = Color.White,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.weight(1f)
            )
            
            // Activity indicator
            if (isListening) {
                Icon(
                    imageVector = Icons.Default.Mic,
                    contentDescription = "Recording",
                    tint = Color(0xFF4CAF50),
                    modifier = Modifier.size(if (isTablet) 20.dp else 16.dp)
                )
            }
        }
    }
}

@Composable
private fun BottomControls(
    buttonText: String,
    canRecord: Boolean,
    onManualRecord: () -> Unit,
    isListening: Boolean,
    listeningType: String,
    isTablet: Boolean
) {
    var isPressed by remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()
    
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        // Button state hint
        Text(
            text = when {
                isListening && listeningType == "manual" -> "Tap to stop recording"
                isListening -> "Tap to interrupt or wait for silence"
                else -> "Tap to start voice command"
            },
            fontSize = if (isTablet) 14.sp else 12.sp,
            color = Color.White.copy(alpha = 0.7f),
            textAlign = TextAlign.Center
        )
        
        // Main voice button
        FilledTonalButton(
            onClick = { 
                isPressed = true
                onManualRecord()
                coroutineScope.launch {
                    delay(200)
                    isPressed = false
                }
            },
            enabled = canRecord,
            modifier = Modifier
                .height(if (isTablet) 64.dp else 56.dp)
                .widthIn(min = if (isTablet) 240.dp else 200.dp)
                .scale(if (isPressed) 0.95f else 1f),
            colors = ButtonDefaults.filledTonalButtonColors(
                containerColor = when {
                    !canRecord -> Color(0xFF424242).copy(alpha = 0.3f)
                    isPressed -> Color(0xFF00BCD4).copy(alpha = 0.7f)
                    buttonText.contains("Stop") || buttonText.contains("Interrupt") -> Color(0xFFFF5722).copy(alpha = 0.4f)
                    else -> Color(0xFF4CAF50).copy(alpha = 0.4f)
                },
                contentColor = when {
                    !canRecord -> Color(0xFF757575)
                    isPressed -> Color(0xFF00BCD4)
                    buttonText.contains("Stop") || buttonText.contains("Interrupt") -> Color(0xFFFF5722)
                    else -> Color(0xFF4CAF50)
                },
                disabledContainerColor = Color(0xFF424242).copy(alpha = 0.2f),
                disabledContentColor = Color(0xFF757575)
            ),
            shape = RoundedCornerShape(28.dp)
        ) {
            Icon(
                imageVector = when {
                    buttonText.contains("Stop") -> Icons.Default.Stop
                    buttonText.contains("Interrupt") -> Icons.Default.VolumeOff
                    else -> Icons.Default.Mic
                },
                contentDescription = buttonText,
                modifier = Modifier.size(if (isTablet) 28.dp else 24.dp)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Text(
                text = buttonText,
                fontSize = if (isTablet) 18.sp else 16.sp,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Composable
private fun ConversationDisplay(
    userTranscription: String,
    assistantSpeech: String,
    isTablet: Boolean
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // User message
        AnimatedVisibility(
            visible = userTranscription.isNotBlank(),
            enter = slideInVertically() + fadeIn(),
            exit = slideOutVertically() + fadeOut()
        ) {
            ConversationCard(
                title = "You:",
                content = userTranscription,
                backgroundColor = Color(0xFF1E3A8A),
                textColor = Color(0xFF93C5FD),
                icon = Icons.Default.Person,
                isTablet = isTablet
            )
        }

        // Assistant response
        AnimatedVisibility(
            visible = assistantSpeech.isNotBlank(),
            enter = slideInVertically() + fadeIn(),
            exit = slideOutVertically() + fadeOut()
        ) {
            ConversationCard(
                title = "AURA:",
                content = assistantSpeech,
                backgroundColor = Color(0xFF064E3B),
                textColor = Color(0xFF6EE7B7),
                icon = Icons.Default.Psychology,
                isTablet = isTablet
            )
        }
    }
}

@Composable
private fun ConversationCard(
    title: String,
    content: String,
    backgroundColor: Color,
    textColor: Color,
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    isTablet: Boolean
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = if (isTablet) 32.dp else 16.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor.copy(alpha = 0.8f)),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            verticalAlignment = Alignment.Top,
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Icon(
                imageVector = icon,
                contentDescription = title,
                tint = textColor.copy(alpha = 0.8f),
                modifier = Modifier.size(if (isTablet) 24.dp else 20.dp)
            )
            
            Column {
                Text(
                    text = title,
                    fontSize = if (isTablet) 16.sp else 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = textColor.copy(alpha = 0.8f)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = content,
                    fontSize = if (isTablet) 18.sp else 16.sp,
                    color = textColor,
                    lineHeight = if (isTablet) 24.sp else 22.sp
                )
            }
        }
    }
}
