# Generated by Copilot
"""
AURA Multi-Provider Setup and Test Script
Quick setup and validation for the new multi-provider system
"""

import os
import sys
import subprocess
import asyncio
import httpx
from pathlib import Path

def check_environment():
    """Check if environment is properly configured"""
    print("üîç Checking environment configuration...")
    
    # Check if .env file exists
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå .env file not found")
        print("Please create a .env file with your API keys")
        return False
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Check API keys
    groq_key = os.getenv("GROQ_API_KEY")
    gemini_key = os.getenv("GEMINI_API_KEY")
    
    if not groq_key:
        print("‚ö†Ô∏è GROQ_API_KEY not found in .env file")
    else:
        print("‚úÖ Groq API key configured")
    
    if not gemini_key:
        print("‚ö†Ô∏è GEMINI_API_KEY not found in .env file")
    else:
        print("‚úÖ Gemini API key configured")
    
    if not groq_key and not gemini_key:
        print("‚ùå No AI provider API keys found")
        print("Please add GROQ_API_KEY and/or GEMINI_API_KEY to your .env file")
        return False
    
    return True

def check_dependencies():
    """Check if all required dependencies are installed"""
    print("\nüì¶ Checking dependencies...")
    
    required_packages = [
        "fastapi", "uvicorn", "langgraph", "httpx", 
        "pydantic", "python-dotenv", "pillow"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå Missing packages: {', '.join(missing_packages)}")
        print("Run: pip install -r requirements.txt")
        return False
    
    return True

def test_imports():
    """Test if all custom modules can be imported"""
    print("\nüîß Testing module imports...")
    
    try:
        from providers.provider_registry import provider_registry
        print("  ‚úÖ Provider registry")
    except Exception as e:
        print(f"  ‚ùå Provider registry: {e}")
        return False
    
    try:
        from ai_services import stt_service, llm_service, vlm_service, tts_service
        print("  ‚úÖ AI services")
    except Exception as e:
        print(f"  ‚ùå AI services: {e}")
        return False
    
    try:
        from api.provider_routes import provider_router
        print("  ‚úÖ Provider routes")
    except Exception as e:
        print(f"  ‚ùå Provider routes: {e}")
        return False
    
    return True

async def test_server_startup():
    """Test if server can start and respond"""
    print("\nüöÄ Testing server startup...")
    
    # Start server in background
    server_process = subprocess.Popen(
        [sys.executable, "run.py"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    # Wait a moment for server to start
    await asyncio.sleep(5)
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/health", timeout=10.0)
            if response.status_code == 200:
                print("  ‚úÖ Server started successfully")
                
                # Test provider endpoints
                provider_response = await client.get("http://localhost:8000/providers/health")
                if provider_response.status_code == 200:
                    print("  ‚úÖ Provider endpoints working")
                    return True, server_process
                else:
                    print("  ‚ùå Provider endpoints failed")
                    return False, server_process
            else:
                print(f"  ‚ùå Server health check failed: {response.status_code}")
                return False, server_process
    except Exception as e:
        print(f"  ‚ùå Server startup failed: {e}")
        return False, server_process

def create_sample_env():
    """Create a sample .env file"""
    print("\nüìù Creating sample .env file...")
    
    sample_env = """# AURA Backend Environment Variables

# API Keys (Add your actual keys here)
GROQ_API_KEY=your_groq_api_key_here
GEMINI_API_KEY=your_gemini_api_key_here

# Default AI Provider Configuration
DEFAULT_STT_PROVIDER=groq
DEFAULT_LLM_PROVIDER=groq
DEFAULT_VLM_PROVIDER=groq
DEFAULT_TTS_PROVIDER=groq

# Default Model Configuration
DEFAULT_STT_MODEL=whisper-large-v3-turbo
DEFAULT_LLM_MODEL=llama-3.3-70b-versatile
DEFAULT_VLM_MODEL=llama-4-maverick-17b-128e-instruct
DEFAULT_TTS_MODEL=playai-tts
DEFAULT_TTS_VOICE=Arista-PlayAI

# Enable/Disable Provider Fallback
ENABLE_PROVIDER_FALLBACK=true

# Server Configuration
HOST=0.0.0.0
PORT=8000
RELOAD=true
LOG_LEVEL=INFO

# Optional: For production security
BACKEND_SECRET_KEY=your_secret_key_here
ALLOWED_ORIGINS=*
"""
    
    with open(".env.example", "w") as f:
        f.write(sample_env)
    
    print("  ‚úÖ Created .env.example file")
    print("  üìã Copy this to .env and add your actual API keys")

async def main():
    """Main setup and test function"""
    print("üéØ AURA Multi-Provider Setup and Test")
    print("Generated by Copilot")
    print("=" * 50)
    
    # Change to backend directory
    if not os.path.exists("main.py"):
        if os.path.exists("aura_backend"):
            os.chdir("aura_backend")
        else:
            print("‚ùå Cannot find AURA backend directory")
            return
    
    # Step 1: Check environment
    if not check_environment():
        create_sample_env()
        print("\nüí° Next steps:")
        print("1. Copy .env.example to .env")
        print("2. Add your API keys to .env")
        print("3. Run this script again")
        return
    
    # Step 2: Check dependencies  
    if not check_dependencies():
        print("\nüí° Install dependencies first:")
        print("pip install -r requirements.txt")
        return
    
    # Step 3: Test imports
    if not test_imports():
        print("\n‚ùå Module imports failed")
        return
    
    # Step 4: Test server
    success, server_process = await test_server_startup()
    
    if success:
        print("\nüéâ Setup complete! Your AURA multi-provider system is ready!")
        print("\nüìö Available endpoints:")
        print("  ‚Ä¢ http://localhost:8000/docs - API documentation")
        print("  ‚Ä¢ http://localhost:8000/providers/health - Provider health")
        print("  ‚Ä¢ http://localhost:8000/providers/info - Provider information")
        print("  ‚Ä¢ http://localhost:8000/providers/models - Available models")
        
        print("\nüß™ Run tests:")
        print("  python test_multi_provider.py")
        
        print("\nüìñ Documentation:")
        print("  See MULTI_PROVIDER_GUIDE.md for detailed usage")
        
        # Ask if user wants to keep server running
        try:
            input("\nPress Enter to stop the server...")
        except KeyboardInterrupt:
            pass
    else:
        print("\n‚ùå Setup failed. Check the errors above.")
    
    # Stop server
    if server_process:
        server_process.terminate()
        try:
            server_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            server_process.kill()
        print("üõë Server stopped")

if __name__ == "__main__":
    asyncio.run(main())
