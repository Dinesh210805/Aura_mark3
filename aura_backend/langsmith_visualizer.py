# Generated by Copilot
"""
LangSmith Visualization Utilities for AURA Agent
Provides tools to visualize and analyze agent execution traces
"""

import os
import json
from typing import Dict, Any, List, Optional
from langsmith import Client
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class AuraLangSmithVisualizer:
    """Utility class for visualizing AURA agent traces in LangSmith"""
    
    def __init__(self):
        self.client = None
        self.project_name = os.getenv("LANGCHAIN_PROJECT", "aura-agent-visualization")
        
        # Initialize LangSmith client if API key is available
        langsmith_key = os.getenv("LANGCHAIN_API_KEY")
        if langsmith_key and langsmith_key != "your_langsmith_api_key_here":
            try:
                self.client = Client(api_key=langsmith_key)
                logger.info(f"LangSmith visualizer initialized for project: {self.project_name}")
            except Exception as e:
                logger.error(f"Failed to initialize LangSmith client: {e}")
        else:
            logger.warning("LangSmith API key not configured")
    
    def is_available(self) -> bool:
        """Check if LangSmith is available and configured"""
        return self.client is not None
    
    def get_recent_traces(self, hours: int = 1, limit: int = 20) -> List[Dict[str, Any]]:
        """Get recent traces from the AURA project"""
        if not self.is_available():
            return []
        
        try:
            # Calculate start time
            start_time = datetime.now() - timedelta(hours=hours)
            
            # Get runs from the project
            runs = list(self.client.list_runs(
                project_name=self.project_name,
                start_time=start_time,
                limit=limit
            ))
            
            traces = []
            for run in runs:
                trace_info = {
                    "id": str(run.id),
                    "name": run.name,
                    "start_time": run.start_time.isoformat() if run.start_time else None,
                    "end_time": run.end_time.isoformat() if run.end_time else None,
                    "status": run.status,
                    "inputs": run.inputs,
                    "outputs": run.outputs,
                    "error": run.error,
                    "execution_order": run.execution_order,
                    "parent_run_id": str(run.parent_run_id) if run.parent_run_id else None
                }
                traces.append(trace_info)
            
            logger.info(f"Retrieved {len(traces)} traces from LangSmith")
            return traces
            
        except Exception as e:
            logger.error(f"Failed to get traces from LangSmith: {e}")
            return []
    
    def get_trace_details(self, trace_id: str) -> Optional[Dict[str, Any]]:
        """Get detailed information about a specific trace"""
        if not self.is_available():
            return None
        
        try:
            run = self.client.read_run(trace_id)
            
            # Get child runs to see the full execution flow
            child_runs = list(self.client.list_runs(trace_filter={"parent_run": trace_id}))
            
            return {
                "main_run": {
                    "id": str(run.id),
                    "name": run.name,
                    "start_time": run.start_time.isoformat() if run.start_time else None,
                    "end_time": run.end_time.isoformat() if run.end_time else None,
                    "status": run.status,
                    "inputs": run.inputs,
                    "outputs": run.outputs,
                    "error": run.error
                },
                "child_runs": [
                    {
                        "id": str(child.id),
                        "name": child.name,
                        "start_time": child.start_time.isoformat() if child.start_time else None,
                        "end_time": child.end_time.isoformat() if child.end_time else None,
                        "status": child.status,
                        "inputs": child.inputs,
                        "outputs": child.outputs,
                        "error": child.error,
                        "execution_order": child.execution_order
                    }
                    for child in sorted(child_runs, key=lambda x: x.execution_order or 0)
                ]
            }
            
        except Exception as e:
            logger.error(f"Failed to get trace details: {e}")
            return None
    
    def analyze_execution_flow(self, trace_id: str) -> Dict[str, Any]:
        """Analyze the execution flow of a trace"""
        trace_details = self.get_trace_details(trace_id)
        if not trace_details:
            return {}
        
        analysis = {
            "total_nodes": len(trace_details["child_runs"]),
            "execution_time_ms": 0,
            "node_execution_times": {},
            "node_sequence": [],
            "errors": [],
            "success": True
        }
        
        main_run = trace_details["main_run"]
        if main_run["start_time"] and main_run["end_time"]:
            start = datetime.fromisoformat(main_run["start_time"].replace('Z', '+00:00'))
            end = datetime.fromisoformat(main_run["end_time"].replace('Z', '+00:00'))
            analysis["execution_time_ms"] = (end - start).total_seconds() * 1000
        
        for child_run in trace_details["child_runs"]:
            node_name = child_run["name"]
            analysis["node_sequence"].append(node_name)
            
            # Calculate node execution time
            if child_run["start_time"] and child_run["end_time"]:
                start = datetime.fromisoformat(child_run["start_time"].replace('Z', '+00:00'))
                end = datetime.fromisoformat(child_run["end_time"].replace('Z', '+00:00'))
                execution_time = (end - start).total_seconds() * 1000
                analysis["node_execution_times"][node_name] = execution_time
            
            # Check for errors
            if child_run["error"] or child_run["status"] == "error":
                analysis["errors"].append({
                    "node": node_name,
                    "error": child_run["error"]
                })
                analysis["success"] = False
        
        return analysis
    
    def generate_execution_report(self, hours: int = 1) -> Dict[str, Any]:
        """Generate a comprehensive execution report"""
        traces = self.get_recent_traces(hours=hours)
        
        if not traces:
            return {"error": "No traces available or LangSmith not configured"}
        
        report = {
            "total_executions": len(traces),
            "success_rate": 0,
            "average_execution_time": 0,
            "most_common_errors": {},
            "node_performance": {},
            "recent_traces": []
        }
        
        successful_executions = 0
        total_execution_time = 0
        error_counts = {}
        
        for trace in traces[:10]:  # Analyze last 10 traces in detail
            trace_analysis = self.analyze_execution_flow(trace["id"])
            
            if trace_analysis:
                report["recent_traces"].append({
                    "id": trace["id"],
                    "start_time": trace["start_time"],
                    "success": trace_analysis["success"],
                    "execution_time_ms": trace_analysis["execution_time_ms"],
                    "node_sequence": trace_analysis["node_sequence"],
                    "errors": trace_analysis["errors"]
                })
                
                if trace_analysis["success"]:
                    successful_executions += 1
                
                total_execution_time += trace_analysis["execution_time_ms"]
                
                # Count errors
                for error in trace_analysis["errors"]:
                    error_key = f"{error['node']}: {error['error'][:50]}..."
                    error_counts[error_key] = error_counts.get(error_key, 0) + 1
        
        report["success_rate"] = (successful_executions / len(traces)) * 100 if traces else 0
        report["average_execution_time"] = total_execution_time / len(traces) if traces else 0
        report["most_common_errors"] = dict(sorted(error_counts.items(), key=lambda x: x[1], reverse=True)[:5])
        
        return report
    
    def get_dashboard_url(self) -> str:
        """Get the LangSmith dashboard URL for the project"""
        if not self.is_available():
            return "LangSmith not configured"
        
        return f"https://smith.langchain.com/projects/p/{self.project_name}"

# Global instance
visualizer = AuraLangSmithVisualizer()
