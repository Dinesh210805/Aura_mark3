# Generated by Copilot
"""
LangSmith Visualization API Routes
Provides REST endpoints for visualizing agent execution traces
"""

from fastapi import APIRouter, HTTPException, Query
from typing import Dict, Any, List, Optional
import logging

from langsmith_visualizer import visualizer

logger = logging.getLogger(__name__)

langsmith_router = APIRouter(prefix="/langsmith", tags=["LangSmith Visualization"])

@langsmith_router.get("/status")
async def get_langsmith_status() -> Dict[str, Any]:
    """Get LangSmith configuration status"""
    return {
        "available": visualizer.is_available(),
        "project_name": visualizer.project_name,
        "dashboard_url": visualizer.get_dashboard_url() if visualizer.is_available() else None
    }

@langsmith_router.get("/traces")
async def get_recent_traces(
    hours: int = Query(default=1, description="Hours to look back for traces"),
    limit: int = Query(default=20, description="Maximum number of traces to return")
) -> Dict[str, Any]:
    """Get recent execution traces from LangSmith"""
    if not visualizer.is_available():
        raise HTTPException(status_code=503, detail="LangSmith not configured")
    
    try:
        traces = visualizer.get_recent_traces(hours=hours, limit=limit)
        return {
            "traces": traces,
            "count": len(traces),
            "hours_back": hours
        }
    except Exception as e:
        logger.error(f"Failed to get traces: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@langsmith_router.get("/traces/{trace_id}")
async def get_trace_details(trace_id: str) -> Dict[str, Any]:
    """Get detailed information about a specific trace"""
    if not visualizer.is_available():
        raise HTTPException(status_code=503, detail="LangSmith not configured")
    
    try:
        trace_details = visualizer.get_trace_details(trace_id)
        if not trace_details:
            raise HTTPException(status_code=404, detail="Trace not found")
        
        return trace_details
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to get trace details: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@langsmith_router.get("/traces/{trace_id}/analysis")
async def analyze_trace_execution(trace_id: str) -> Dict[str, Any]:
    """Analyze the execution flow of a specific trace"""
    if not visualizer.is_available():
        raise HTTPException(status_code=503, detail="LangSmith not configured")
    
    try:
        analysis = visualizer.analyze_execution_flow(trace_id)
        if not analysis:
            raise HTTPException(status_code=404, detail="Trace not found or analysis failed")
        
        return analysis
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to analyze trace: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@langsmith_router.get("/report")
async def get_execution_report(
    hours: int = Query(default=1, description="Hours to analyze for the report")
) -> Dict[str, Any]:
    """Generate a comprehensive execution report"""
    if not visualizer.is_available():
        raise HTTPException(status_code=503, detail="LangSmith not configured")
    
    try:
        report = visualizer.generate_execution_report(hours=hours)
        return report
    except Exception as e:
        logger.error(f"Failed to generate report: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@langsmith_router.get("/dashboard")
async def get_dashboard_info() -> Dict[str, Any]:
    """Get LangSmith dashboard information"""
    if not visualizer.is_available():
        raise HTTPException(status_code=503, detail="LangSmith not configured")
    
    return {
        "dashboard_url": visualizer.get_dashboard_url(),
        "project_name": visualizer.project_name,
        "instructions": {
            "1": "Open the dashboard URL to see visual trace diagrams",
            "2": "Use the API endpoints below to get programmatic access to trace data",
            "3": "The dashboard shows the execution flow, timing, and errors for each agent run"
        },
        "available_endpoints": {
            "status": "/langsmith/status - Check LangSmith configuration",
            "traces": "/langsmith/traces - Get recent execution traces",
            "trace_details": "/langsmith/traces/{trace_id} - Get detailed trace info",
            "trace_analysis": "/langsmith/traces/{trace_id}/analysis - Analyze execution flow",
            "report": "/langsmith/report - Generate execution report"
        }
    }
