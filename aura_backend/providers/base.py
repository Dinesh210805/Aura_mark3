# Generated by Copilot
"""
Base Provider Classes for AI Services
Defines abstract interfaces for STT, LLM, VLM, and TTS providers
"""

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List, Union
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class AIModel:
    """Model configuration for AI providers"""
    name: str
    provider: str
    capabilities: List[str]  # ["stt", "llm", "vlm", "tts"]
    max_tokens: Optional[int] = None
    supports_streaming: bool = False
    cost_per_1k_tokens: Optional[float] = None
    context_length: Optional[int] = None
    description: str = ""

@dataclass 
class ProviderConfig:
    """Configuration for AI provider"""
    name: str
    api_key: str
    base_url: str
    timeout: float = 30.0
    max_retries: int = 3
    rate_limit: Optional[Dict[str, int]] = None
    default_models: Dict[str, str] = None  # {"stt": "model", "llm": "model", ...}

class BaseProvider(ABC):
    """Base class for all AI providers"""
    
    def __init__(self, config: ProviderConfig):
        self.config = config
        self.name = config.name
        self.api_key = config.api_key
        self.base_url = config.base_url
        self.timeout = config.timeout
        self.max_retries = config.max_retries
        
        if not self.api_key:
            logger.warning(f"No API key provided for {self.name} provider")
    
    @abstractmethod
    async def health_check(self) -> Dict[str, Any]:
        """Check if provider is healthy and accessible"""
        pass
    
    @abstractmethod
    def get_available_models(self) -> List[AIModel]:
        """Get list of available models for this provider"""
        pass
    
    def is_available(self) -> bool:
        """Check if provider is available (has API key)"""
        return bool(self.api_key)

class BaseSTTProvider(BaseProvider):
    """Base Speech-to-Text provider interface"""
    
    @abstractmethod
    async def transcribe(
        self, 
        audio_data: bytes, 
        model: Optional[str] = None,
        language: Optional[str] = "en",
        **kwargs
    ) -> Optional[str]:
        """Convert audio to text"""
        pass
    
    @abstractmethod
    def get_supported_formats(self) -> List[str]:
        """Get supported audio formats"""
        pass

class BaseLLMProvider(BaseProvider):
    """Base Large Language Model provider interface"""
    
    @abstractmethod
    async def analyze_intent(
        self, 
        transcript: str, 
        ui_tree: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """Analyze user intent from transcript"""
        pass
    
    @abstractmethod
    async def generate_response(
        self, 
        prompt: str,
        model: Optional[str] = None,
        temperature: float = 0.1,
        max_tokens: Optional[int] = None,
        **kwargs
    ) -> Optional[str]:
        """Generate text response"""
        pass
    
    @abstractmethod
    async def chat_completion(
        self,
        messages: List[Dict[str, str]],
        model: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """Chat completion with message history"""
        pass

class BaseVLMProvider(BaseProvider):
    """Base Vision-Language Model provider interface"""
    
    @abstractmethod
    async def locate_ui_element(
        self, 
        screenshot: bytes, 
        intent: str,
        model: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """Locate UI elements in screenshot"""
        pass
    
    @abstractmethod
    async def analyze_screen_context(
        self, 
        screenshot: bytes,
        model: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """Analyze overall screen context"""
        pass
    
    @abstractmethod
    async def describe_image(
        self, 
        image_data: bytes,
        prompt: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs
    ) -> Optional[str]:
        """Generate image description"""
        pass

class BaseTTSProvider(BaseProvider):
    """Base Text-to-Speech provider interface"""
    
    @abstractmethod
    async def generate_speech(
        self, 
        text: str, 
        voice: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs
    ) -> Optional[bytes]:
        """Generate speech audio from text"""
        pass
    
    @abstractmethod
    def get_available_voices(self) -> List[Dict[str, str]]:
        """Get available voices for TTS"""
        pass
    
    @abstractmethod
    def get_supported_formats(self) -> List[str]:
        """Get supported audio output formats"""
        pass

class ProviderError(Exception):
    """Base exception for provider errors"""
    
    def __init__(self, message: str, provider: str, error_code: Optional[str] = None):
        super().__init__(message)
        self.provider = provider
        self.error_code = error_code

class ModelNotAvailableError(ProviderError):
    """Raised when requested model is not available"""
    pass

class ProviderUnavailableError(ProviderError):
    """Raised when provider is not available"""
    pass

class RateLimitError(ProviderError):
    """Raised when rate limit is exceeded"""
    pass
